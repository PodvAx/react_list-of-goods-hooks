{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","isSorted","App","useState","Default","sortField","setSortField","isReverse","setIsReverse","visibleGoods","goods","sortedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getSortedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAML,IAAIE,GAAW,EAiCFC,EAAgB,WAC3B,MAAkCC,mBAASJ,EAASK,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAnCe,SACrBC,EACAL,EACAE,GAEA,IAAMI,EAAW,YAAOD,GAuBxB,OArBIL,EACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKN,EAASgB,SAGZ,OAFAd,GAAW,EAEJY,EAAMG,cAAcF,GAC7B,KAAKf,EAASkB,OAGZ,OAFAhB,GAAW,EAEJY,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAIbjB,IADSM,EAMJA,EAAYI,EAAYQ,UAAYR,EAOtBS,CAAepB,EAAiBK,EAAWE,GAahE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMjB,EAAaP,EAASgB,WACrCM,UAAWG,IACT,iBACA,CAAE,WAAYnB,IAAcN,EAASgB,WALzC,iCAWA,wBACEO,KAAK,SACLC,QAAS,kBAAMjB,EAAaP,EAASkB,SACrCI,UAAWG,IACT,oBACA,CAAE,WAAYnB,IAAcN,EAASkB,SALzC,4BAWA,wBACEK,KAAK,SACLC,QAjCQ,kBAEVf,GADJD,IAiCMc,UAAWG,IACT,oBACA,CAAE,YAAajB,IALnB,qBAWCN,GACC,wBACEqB,KAAK,SACLC,QAlDI,WACZf,GAAa,GACbF,EAAaP,EAASK,UAiDdiB,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e5820dc1.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Default = '',\n}\n\nlet isSorted = false;\n\nconst getSortedGoods = (\n  goods: string[],\n  sortField: SortType,\n  isReverse: boolean,\n) => {\n  const sortedGoods = [...goods];\n\n  if (sortField) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          isSorted = true;\n\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          isSorted = true;\n\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  } else if (isReverse) {\n    isSorted = true;\n  } else {\n    isSorted = false;\n  }\n\n  return isReverse ? sortedGoods.reverse() : sortedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [isReverse, setIsReverse] = useState(false);\n\n  const visibleGoods = getSortedGoods(goodsFromServer, sortField, isReverse);\n\n  const reset = () => {\n    setIsReverse(false);\n    setSortField(SortType.Default);\n  };\n\n  const reverse = () => (\n    isReverse\n      ? setIsReverse(false)\n      : setIsReverse(true)\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.Alphabet)}\n          className={cn(\n            'button is-info',\n            { 'is-light': sortField !== SortType.Alphabet },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.Length)}\n          className={cn(\n            'button is-success',\n            { 'is-light': sortField !== SortType.Length },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={reverse}\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReverse },\n          )}\n        >\n          Reverse\n        </button>\n\n        {isSorted && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}